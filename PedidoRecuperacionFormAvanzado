import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.*;

public class PedidoRecuperacionFormAvanzado extends JFrame {

    private JTextField txtPedidoID;
    private JTextField txtNombreCliente;
    private JTextField txtFechaPedido;
    private JComboBox<String> comboEstadoPedido;
    private JButton btnBuscar, btnLimpiar;
    
    public PedidoRecuperacionFormAvanzado() {
        // Configuración de la ventana
        setTitle("Recuperación de Pedido");
        setSize(500, 300);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setBackground(Color.DARK_GRAY);
        
        // Establecer el layout
        setLayout(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5); // Márgenes

        // Etiquetas y campos de texto
        JLabel lblPedidoID = new JLabel("ID del Pedido:");
        txtPedidoID = new JTextField(20);
        agregarComponente(lblPedidoID, gbc, 0, 0);
        agregarComponente(txtPedidoID, gbc, 1, 0);

        JLabel lblNombreCliente = new JLabel("Nombre del Cliente:");
        txtNombreCliente = new JTextField(20);
        txtNombreCliente.setEditable(false); // Solo lectura
        agregarComponente(lblNombreCliente, gbc, 0, 1);
        agregarComponente(txtNombreCliente, gbc, 1, 1);

        JLabel lblFechaPedido = new JLabel("Fecha del Pedido:");
        txtFechaPedido = new JTextField(20);
        txtFechaPedido.setEditable(false); // Solo lectura
        agregarComponente(lblFechaPedido, gbc, 0, 2);
        agregarComponente(txtFechaPedido, gbc, 1, 2);

        JLabel lblEstadoPedido = new JLabel("Estado del Pedido:");
        String[] estados = {"Pendiente", "En proceso", "Completado", "Cancelado"};
        comboEstadoPedido = new JComboBox<>(estados);
        agregarComponente(lblEstadoPedido, gbc, 0, 3);
        agregarComponente(comboEstadoPedido, gbc, 1, 3);

        // Botones
        btnBuscar = new JButton("Buscar Pedido");
        btnLimpiar = new JButton("Limpiar Formulario");
        agregarComponente(btnBuscar, gbc, 0, 4);
        agregarComponente(btnLimpiar, gbc, 1, 4);

        // Acción para buscar pedido
        btnBuscar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                buscarPedido();
            }
        });

        // Acción para limpiar campos
        btnLimpiar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                limpiarCampos();
            }
        });

        // Hacer visible la ventana
        setVisible(true);
    }

    // Método para agregar componentes al layout con GridBagConstraints
    private void agregarComponente(Component componente, GridBagConstraints gbc, int x, int y) {
        gbc.gridx = x;
        gbc.gridy = y;
        gbc.anchor = GridBagConstraints.WEST;
        add(componente, gbc);
    }

    // Método para buscar el pedido en la base de datos
    private void buscarPedido() {
        String pedidoID = txtPedidoID.getText();

        // Conexión a la base de datos
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            // Conectar a la base de datos (cambiar según los datos de conexión)
            Class.forName("com.mysql.cj.jdbc.Driver");
            conn = DriverManager.getConnection("jdbc:mysql:SQL8001.site4now.net", "db_aae3ed_btubus_admin", "Programacion2024");

            String sql = "SELECT nombre_cliente, fecha_pedido, estado_pedido FROM pedidos WHERE pedido_id = ?";
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, pedidoID);
            rs = stmt.executeQuery();

            if (rs.next()) {
                txtNombreCliente.setText(rs.getString("nombre_cliente"));
                txtFechaPedido.setText(rs.getString("fecha_pedido"));
                comboEstadoPedido.setSelectedItem(rs.getString("estado_pedido"));
            } else {
                JOptionPane.showMessageDialog(this, "Pedido no encontrado");
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al buscar el pedido");
        } finally {
            try { if (rs != null) rs.close(); } catch (SQLException e) { e.printStackTrace(); }
            try { if (stmt != null) stmt.close(); } catch (SQLException e) { e.printStackTrace(); }
            try { if (conn != null) conn.close(); } catch (SQLException e) { e.printStackTrace(); }
        }
    }

    // Método para limpiar los campos del formulario
    private void limpiarCampos() {
        txtPedidoID.setText("");
        txtNombreCliente.setText("");
        txtFechaPedido.setText("");
        comboEstadoPedido.setSelectedIndex(0);
    }

    public static void main(String[] args) {
        new PedidoRecuperacionFormAvanzado();
    }
}
